/*
THIS FILE WAS AUTOGENERATED! DO NOT EDIT!
file to edit: Annealing.ipynb

*/



import Path
import TensorFlow
import SchwiftyNotebook_Layer_Refined

typealias Scheduler = (Float) -> Float

func computeCosignPosition(start: Float,
                           stop: Float,
                           timePosition: Float) -> Float {
    return start + (1 + cos(Float.pi*(1 - timePosition))) * (stop - start) / 2 
}

public func createCosignSchedulerForRange(start: Float, stop: Float) -> (Float) -> Float {
    return { (timePosition: Float) -> Float in computeCosignPosition(start: start, 
                                   stop: stop, 
                                   timePosition: timePosition) }
}

public extension  Double {
    var float: Float {
        return Float(self)
    }
}

public func aggregateSchedulers(schedulers: [(Float) -> Float],
                         appliedPercentages: [Float]) -> (Float) -> Float {
    assert(appliedPercentages.reduce(0.0, { $0 + $1 }) == 1.0.float, 
           "Expected applied precentages to add up to one")
    
    let percentages = appliedPercentages
    assert(percentages.allSatisfy { $0 >= 0 }, 
          "expected percenteages to be non negative")
    
    let cumSum = percentages.reduce([0.0.float], { (a: [Float], x: Float) in a + [a[a.count - 1] + x] })
    let cumSumTensor = Tensor(cumSum)
    
    
    return { 
        timePosition in
        let currentIndex = Int((timePosition .>= cumSumTensor).nonZeroIndices().max().scalar!)
        let actualPosition = (timePosition - cumSum[currentIndex]) /
                                (cumSum[currentIndex + 1] - cumSum[currentIndex])
        return schedulers[currentIndex](actualPosition)
    }
}

public func createDefaultScheduler() -> (Float) -> Float {
    return aggregateSchedulers(schedulers: [createCosignSchedulerForRange(start: 0.3.float, stop: 0.6.float),
                                               createCosignSchedulerForRange(start: 0.6.float, stop: 0.1.float)],
                                              appliedPercentages: [0.3.float, 0.7.float])
}
